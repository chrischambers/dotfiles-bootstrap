#!/usr/bin/env bash
#
# link-dotfiles

set -e
source `pwd`/common.sh

# ----------------------------------------------------------------------------
# Defaults:
# ---------
backup_dir="$HOME/dotfile-backups"
overwrite_all=false
backup_all=false
skip_all=false
os=$(detect_os)
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Parse Arguments:
# ----------------
while [[ $# -gt 1 ]]
do
  key="$1"
  shift

  case $key in
    --backup-all )
      backup_all=true
      ;;
    --overwrite-all )
      overwrite_all=true
      ;;
    --skip-all )
      skip_all=true
      ;;
    -d|--backup-dir )
      backup_dir="$1"
      shift
      ;;
    -o|--os )
      os="$1"
      shift
      ;;
    * )
      # unknown option
    ;;
  esac
done

if [[ -n $1 ]]; then
    dotfiles_root="$(abspath $1)"
else
    fail "The dotfiles directory path is a required argument."
fi
# ----------------------------------------------------------------------------

link_dotfiles () {
  info 'Linking dotfiles'

  for source in $(find_dotfile_symlinks $dotfiles_root $os)
  do
    dest=$(determine_dotfile_destination $source)

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] &&
         [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do?
         [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        remove_link $dest
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mkdir -p $backup_dir
        mv $dest $backup_dir
        success "moved $dest to $backup_dir"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

echo ''
link_dotfiles

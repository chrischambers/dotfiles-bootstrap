#!/usr/bin/env bash
#
# bootstrap installs things.

BACKUP_DIR="$HOME/dotfiles-backups"
overwrite_all=false
backup_all=false
skip_all=false
os="$(`pwd`/bin/detect_os)"

while [[ $# -gt 1 ]]
do
key="$1"
shift

case $key in
    --backup-all)
    backup_all=true
    ;;
    --overwrite-all)
    overwrite_all=true
    ;;
    --skip-all)
    skip_all=true
    ;;
    -d|--backup-dir)
    BACKUP_DIR="$1"
    shift
    ;;
    -o|--os)
    os="$1"
    shift
    ;;
    *)
            # unknown option
    ;;
esac
done

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m? \033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_files () {
  ln -s "$1" "$2"
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  for source in $(find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink -o \
                                                  -name \*.symlink*.${os}*)
  do
    dest="$HOME/.`basename \"${source}\" | sed 's/\([^.]*\).*/\1/'`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] &&
         [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do?
         [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mkdir -p $BACKUP_DIR
        mv $dest $BACKUP_DIR
        success "moved $dest to $BACKUP_DIR"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

if [[ -n $1 ]]; then
    DOTFILES_ROOT="$1"
else
    fail "The dotfiles directory path is a required argument."
fi
install_dotfiles
